name: 1.0.$(BuildID)-${{ parameters.env }}
pr: none
pool:
  vmImage: ubuntu-latest
parameters:
  - name: env
    displayName: Environment
    type: string
    default: ci
    values:
      - ci
      - t1
      - t2
      - t3
      - a1
      - a2
      - p1
      - p2
      - p3

resources:
  repositories:
    - repository: templates
      type: github
      name: margani/azure-pipeline-templates
      endpoint: margani
      ref: refs/heads/poc
    - repository: variables
      type: github
      name: margani/azure-pipeline-variables
      endpoint: margani
      ref: refs/heads/poc

variables:
  - template: global/environments.yml@variables
    parameters:
      env: ${{ parameters.env }}
      mainProductName: My First Demo Product

stages:
  - stage: DemoStage1
    jobs:
      - job: DemoJob11
        steps:
          - template: global/initialize-pipeline.yml@variables
          - template: test-variables.yml
            parameters:
              expectations:
                env: ci
                varOrg: myorg
                varSubscriptions: "ci, t1, t2, t3: myorg-devtest-subscription; a1, a2, p1, p2, p3: myorg-production-subscription"
                varNameFormat: "{org}-{env}-{product}-{type}"
                envSubscription: "myorg-devtest-subscription"
                varMainProductName: "Something"
                varResourceGroupTypeName: "rg"
                varFunctionsTypeName: "func"
                varVnetTypeName: "vnet"
                varSubnetTypeName: "subnet"
      - job: DemoJob12
        variables:
          - template: global/environments.yml@variables
            parameters:
              env: a1
              mainProductName: My Second Demo Product
        steps:
          - template: global/initialize-pipeline.yml@variables
          - template: test-variables.yml
            parameters:
              expectations:
                env: ci
                varOrg: myorg
                varSubscriptions: "ci, t1, t2, t3: myorg-devtest-subscription; a1, a2, p1, p2, p3: myorg-production-subscription"
                varNameFormat: "{org}-{env}-{product}-{type}"
                envSubscription: "myorg-devtest-subscription"
                varMainProductName: "sampleProduct"
                varResourceGroupTypeName: "rg"
                varFunctionsTypeName: "func"
                varVnetTypeName: "vnet"
                varSubnetTypeName: "subnet"
      - job: DemoJob13
        variables:
          - template: global/environments.yml@variables
            parameters:
              env: ${{ parameters.env }}
              mainProductName: My Third Demo Product
              varResourceGroupTypeName: ""
              varFunctionsTypeName: "function"
              varVnetTypeName: "vnetwork"
              varSubnetTypeName: "subnetwork"
        steps:
          - template: global/initialize-pipeline.yml@variables
          - template: test-variables.yml
            parameters:
              expectations:
                env: ci
                varOrg: anotherOrg
                varSubscriptions: "ci: my-production-subscription"
                varNameFormat: "{env}-{org}-{env}-{type}-{type}-{product}"
                envSubscription: "my-production-subscription"
                varMainProductName: "another-product"
                varResourceGroupTypeName: ""
                varFunctionsTypeName: "function"
                varVnetTypeName: "vnetwork"
                varSubnetTypeName: "subnetwork"
  - stage: DemoStage2
    jobs:
      - job: DemoJob21
        steps:
          - template: global/initialize-pipeline.yml@variables
          - template: functions/new-function.yml@templates
          - template: tests/display-env.yml
